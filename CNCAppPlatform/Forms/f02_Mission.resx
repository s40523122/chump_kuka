<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>